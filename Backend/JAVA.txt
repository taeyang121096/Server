JAVA


1. JVM의 구조에 대해 설명 해주세요
특징 : 
os에 독립적으로 실행 시킬 수 있다.
클래스 로더를 통해 클래스를 로드하고 자바API와 함께 실행한다.
메모리 관리를 GC를 통해서 한다.

JVM은 stack기반의 가상머신이다.

클래스 로더 : 클래스를 jvm내로 로드하고, 링크를 통해서 배치한다.
실행 엔진 : 인터프리터(바이트 코드를 한줄씩 실행한다.), 컴파일러(), GC

runtime data area :
pc register(현재 수행 중인 jvm 명령의 주소를 갖고 있다), stack(지역 변수, 파라미터,객체 레퍼런스) -> heap(실제 객체), java native interface, native method library -> c, c++로 작성되어져 있다.

java 실행 방식 :
1. javac가 자바 소스코드(.java) 읽어서 -> .class 변환
2. .class -> 클래스 로더를 통해서 -> JVM으로 로드 되고
3. class 파일들을 실행 엔진을 통해서 해석된다.
4. 해석된 바이트코드는 runtime data area에 배치되어지고 실행된다.

call by reference
Ox1234   -> int a
*a   -> (ox1234)

call by value
object b -> ox1234(주소)
(b) -> 파라미터 -> ox42323(주소) -> data : ox1234

String : 불변
StringBuffer : 가변 동기
StringBuilder : 가변 비동기

캐스팅 : 다형성과 상속을 가능하게 해준다.

업 캐스팅 
다운 캐스팅 


원시 타입 : boolean, short, int, double, char, long, float, byte

참조 타입 : 객체
최상위 객체 : java.lang.Object -> ** 업 캐스팅 **


enum
주소 문자열로 되어있거나 .-> 
주문  order, cancle, reorder  Order.order, Order.cancle 
할인율

컬렉션 프레임워크 : 데이터들을 효율적으로 관리할 수 있는 자료구조등이 있는 라이브러리이다.

제네릭 : 데이터 형식에 의존하지 않고 하나의 값이 여러 가지 데이터 타입을 허용할 수 있도록 하는 방법
컴파일 과정에서 타입 체크를 해주는 기능이고 이를 통해서 컴파일 시에 체크를 하기 대문에 객체의 타입 안정성을 높이고 또한 형변환의 번거로움을 줄일 수 있다.

class : 객체를 찍어내기 위한 하나의 틀이 잖아

클래스는 뭐고 : 객체를 정의하는 하나의 설계도이다.
객체는 뭐고 : 객체는 식별 가능한 개체이다. 객체는 구별 가능한 식별자이면서 변경 가능한 상태를 가지고 있다.
 
static 무엇인가 : 클래스 변수이면서, 클래스 로더가 클래스를 로딩할 때 클래스별로 메모리에서 관리 된다.(모든 객체가 공유를 합니다) -> 하지만 GC가 관리하지 않으므로 프로그램이 종료 될때까지 메모리가 할당된채로 존재 하므로 남발하면 성능에 안좋다.


접근 제어자의 종류와 이에 대해 설명 하시오 :
private : 해당 클래스
default : 해당 패키지
protected : 상속한 클래스
public : 전역
외부에 보여주고 싶은 정보들을 선택적으로 제공하기 위함이다.
(캡슐화)

동일성(equals.())과 동등성(==)에 대해서 :
class person {
int weight;
int height;
}
p1.equals(p2) == true -> equals 오버라이딩 하면되지

Object method equals -> 모든 객체가 equals를 오버라이딩 할 수 있겠지
person.weight

객체지향이란 무엇인가 ?
객체 지향은 의존성 관리이다.

객체 지향으로 의존성을 관리하면 변경 영향을 최소화하고 독립적인 배포가 가능해지며 독립적 개발이 가능하다.
DIP(dependency inversion principle)를 통한 고수준 정책과 저수준 구현 세부사항의 분리

solid 객체지향 5대원칙 :
srp : 단일 책임 원칙
ocp : 개방 폐쇄 원칙 다형성(추상화,상속)
lsp : 상위타입은 하위타입으로 프로그램 정확성을 깨뜨리지 않고 변환 가능
isp : 
interface name 
{
get name, get car number, 
}
interface move{
move forward
move rear

}
airplane
train
bus car method 의존할 수 밖에 없잖아
car implements name, move, tax{

int c  = 10;
move forwad(int o1, int o2){
~~~~~~
public int dsss{
System.out.println("dfd");
}
}


}

dip : 의존성을 최소화한다 ->

java8 :
lambda -> 함수형 프로그래밍 (o1,o2) -> 1; 순수함수 하거든 : 동일한 인자를 주면 함수는 무조건 같은 값이 나온다
부수효과가 없는 함수이다.
stream api -> 데이터 계산 시점 -> 컬렉션 하고 스트림의 가장 큰 차이
외부 반복 내부 반복 -> 메모리에 할당을 해 변수 값을(직렬)
내부반복 -> 버퍼에서 해(병렬)
optional -> null saftey를 위함

isPresent() -> 
