네트워크


osi 7 계층

1. physical : 허브, 리피터 -> 데이터를 전기신호로 변환 해서 주고 받는다.
리피터 : 케이블의 길이가 길어질 수록 전기신호가 약해지므로 더 멀리 보내기 위한 증폭 장치이다.
허브 : 리피터 역할을 하며, 기존 리피터와 다르게 여러 장비를 연결 할 수 있다.
여러 장비에서 동시에 데이터 전송하지 못한다. CSMA/CD방식을 적용한다.
브로드캐스트 : 모든 네트워크에 뿌리는 방식이다. -> dns(서버 이름이랑 ip랑 변환 -> 내가 가고싶은 사이트를 물어봐야 되잖아(전체 한테 물어봐야지) request

LAN : 로컬 범위 네트워크
이더넷 : 폭 넓게 네트워크 규격이다

2. data link : 스위치 -> 물리 계층으로 송수신되는 정보를 관리하여 안전하게 전달되도록 한다.
Mac 주소를 통해 통신한다. Mac 주소를 부여하고 에러검출, 재전송, 흐름제어
Mac : 가상 주소가 아니라 물리적 주소

3. network : 라우터, ip -> 데이터를 목적지까지 안전하고 빠르게 전달한다.
라우터 : 라우터를 통해 이동할 경로를 선택하여 ip주소를 지정하고, 해당 경로에 패킷을 전달한다.
라우팅, 흐름제어, 오류제어, 세그먼테이션: 네트워크를 여러 개로 나눈다-> 트래픽 흐름을 제어한다. 보안이 강화 된다.(각 서브넷이 갖고있는 방화벽이)

4. transport : tcp/udp
tcp : 연결 지향형 프로토콜이다.
udp : 비연결 프로토콜이고 데이터를 데이터그램 단위로 전송한다. 오류 제어와 흐름제어를 하지 않는다.
tcp는 가상 회선을 만들어 신뢰성을 보장하도록(흐름, 혼잡, 오류) 하는 프로토콜로 속도가 느린편이다.
tcp : 파일전송(신뢰성이 중요할때)
udp : 스트리밍(연속성이 중요할때)
tcp 3,4 way handshake : syn, ack -> syn -> ack, syn -> ack(연결), fin -> ack -> fin ->  ack(server close) client wait(time over)

5. session : api, socket : 데이터가 통신하기 위한 논리적 연결을 담당, tcp/ip 세션을 만들고 없앤다.
socket : 프로세스가 데이터를 보내거나 받기 위해서는 소켓을 열어야한다. -> 소켓은 프로토콜,ip 주소, 포트 번호로 정의 된다.
두 호스트를 연결해주는 인터페이스 역할을 한다.

api : 만든 프로그램이 개인 또는 기업 기관이 제공하는 기능, 프로그램을 활용할 수 있게끔 도와주는 매개체
애플리케이션 소프트웨어를 구축하고 통합하는 정의 와 프로토콜 세트이다.
rest : 프로토콜이나 표준이 아닌 아키텍처 원칙 세트이다.
json : 서로 다른 언어들간에 데이터를 주고 받을 수 있도록 만들어진 텍스트 기반의 형식이다(경량화)
rest api : 

get post put del -> crud(데이터 조작) http method(state)

get ~~~/api/~~~
post ~~~~/api/~~~

아키텍처 : 소프트웨어의 구성요소들 사이에서 유기적 관계를 표현하고 소프트웨어 설계와 업그레이드를 통제하는 지침과 원칙이다.

6. presentation :
7. application :



